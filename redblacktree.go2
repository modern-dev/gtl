// Copyright 2020. The GTL Authors. All rights reserved.
// https://github.com/modern-dev/gtl
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

package gtl

import (
	"errors"
	"fmt"
)

type color uint8

const (
	red color = iota
	black
)

const tab = 4

var (
	ErrEmptyTree = errors.New("the tree is empty")
)

type treeNode[T any] struct {
	color  color
	left   *treeNode[T]
	right  *treeNode[T]
	parent *treeNode[T]
	value  T
}

type Tree[T any] struct {
	root       *treeNode[T]
	nilNode    *treeNode[T]
	comparator func(a, b T) int
	size       int
}

// NewTree creates an empty tree with provided comparator for items.
func NewTree[T](comparator func(a, b T) int) *Tree[T] {
	nilNode := &treeNode[T]{color: black}

	return &Tree[T]{root: nilNode, nilNode: nilNode, comparator: comparator}
}

// Insert adds value into the tree.
// Complexity O(log n), where n is the number of elements in the tree.
func (t *Tree[T]) Insert(value T) {
	newNode := &treeNode[T]{color: red, value: value, left: t.nilNode, right: t.nilNode, parent: t.nilNode}

	parentNode := t.findInsertNode(newNode)
	newNode.parent = parentNode

	t.addChild(parentNode, newNode)
	t.size++

	t.insertFixup(newNode)
}

// Search tries to find the value in the tree.
// Returns 2 values.
// First value is an item if it was found, otherwise zero value for type parameter.
// Second value is bool indicating whether an item was found.
// Complexity O(log n), where n is the number of elements in the tree.
func (t *Tree[T]) Search(value T) (T, bool) {
	node, found := t.searchFromNode(t.root, value)

	return node.value, found
}

// Max returns max item in the tree according to the comparator.
// Complexity O(log n), where n is the number of elements in tree.
func (t *Tree[T]) Max() T {
	if t.root == t.nilNode {
		panic(ErrEmptyTree)
	}

	node := t.maximum(t.root)
	return node.value
}

// Min returns min item in the tree according to the comparator
// Complexity O(log n), where n is the number of elements in the tree.
func (t *Tree[T]) Min() T {
	if t.root == t.nilNode {
		panic(ErrEmptyTree)
	}

	node := t.minimum(t.root)
	return node.value
}

// Delete deletes the item from the tree. Has no effect if the item was not in the tree.
// Complexity O(log n), where n is the number of elements in the tree.
func (t *Tree[T]) Delete(value T) {
	node, found := t.searchFromNode(t.root, value)
	if !found {
		return
	}

	if color, nodeToFix := t.deleteNode(node); color == black {
		t.deleteFixup(nodeToFix)
	}

	t.size--
}

// Delete return the number of elements in the tree.
// Complexity O(1).
func (t *Tree[T]) Len() int {
	return t.size
}

// Inorder returns slice of items ([]T) sorted from lower to higher by comparator.
// // Complexity O(n), where n is the number of elements in the tree.
func (t *Tree[T]) Inorder() []T {
	var inorder func(*treeNode[T], []T) []T

	inorder = func(node *treeNode[T], result []T) []T {
		if node == t.nilNode {
			return result
		}

		result = inorder(node.left, result)

		result = append(result, node.value)

		result = inorder(node.right, result)

		return result
	}

	return inorder(t.root, make([]T, 0))
}

func (t *Tree[T]) searchFromNode(node *treeNode[T], value T) (*treeNode[T], bool) {
	it := node
	for it != t.nilNode {
		diff := t.comparator(value, it.value)

		if diff == 0 {
			return it, true
		}

		if diff < 0 {
			it = it.left
		} else {
			it = it.right
		}
	}

	return t.nilNode, false
}

func (t *Tree[T]) findInsertNode(newNode *treeNode[T]) *treeNode[T] {
	y := t.nilNode
	x := t.root

	for x != t.nilNode {
		y = x
		if t.comparator(newNode.value, x.value) < 0 {
			x = x.left
		} else {
			x = x.right
		}
	}

	return y
}

func (t *Tree[T]) addChild(node, child *treeNode[T]) {
	if node == t.nilNode {
		t.root = child
		return
	}

	if t.comparator(child.value, node.value) < 0 {
		node.left = child
		return
	}

	node.right = child
}

func (t *Tree[T]) insertFixup(z *treeNode[T]) {
	for z.parent.color == red {
		if z.parent == z.parent.parent.left {
			y := z.parent.parent.right

			if y.color == red {
				z.parent.color = black
				y.color = black
				z.parent.parent.color = red
				z = z.parent.parent
			} else {
				if z == z.parent.right {
					z = z.parent
					t.leftRotate(z)
				}
				z.parent.color = black
				z.parent.parent.color = red
				t.rightRotate(z.parent.parent)
			}
		} else {
			y := z.parent.parent.left

			if y.color == red {
				z.parent.color = black
				y.color = black
				z.parent.parent.color = red
				z = z.parent.parent
			} else {
				if z == z.parent.left {
					z = z.parent
					t.rightRotate(z)
				}
				z.parent.color = black
				z.parent.parent.color = red
				t.leftRotate(z.parent.parent)
			}
		}
	}

	t.root.color = black
}

func (t *Tree[T]) deleteNode(z *treeNode[T]) (color, *treeNode[T]) {
	var x *treeNode[T]

	y := z
	originalColor := y.color

	if z.left == t.nilNode {
		x = z.right
		t.transplant(z, z.right)
		return originalColor, x
	}

	if z.right == t.nilNode {
		x = z.left
		t.transplant(z, z.left)
		return originalColor, x
	}

	y = t.minimum(z.right)
	originalColor = y.color
	x = y.right

	if y.parent == z {
		x.parent = y
	} else {
		t.transplant(y, y.right)
		y.right = z.right
		y.right.parent = y
	}

	t.transplant(z, y)
	y.left = z.left
	y.left.parent = y
	y.color = z.color

	return originalColor, x
}

func (t *Tree[T]) deleteFixup(x *treeNode[T]) {
	for x != t.root && x.color == black {
		if x == x.parent.left {
			w := x.parent.right

			if w.color == red {
				w.color = black
				x.parent.color = red
				t.leftRotate(x.parent)
				w = x.parent.right
			}

			if w.left.color == black && w.right.color == black {
				w.color = red
				x = x.parent
			} else {
				if w.right.color == black {
					w.left.color = black
					w.color = red
					t.rightRotate(w)
					w = x.parent.right
				}

				w.color = x.parent.color
				x.parent.color = black
				w.right.color = black
				t.leftRotate(x.parent)
				x = t.root
			}
		} else {
			w := x.parent.left

			if w.color == red {
				w.color = black
				x.parent.color = red
				t.rightRotate(x.parent)
				w = x.parent.left
			}

			if w.left.color == black && w.right.color == black {
				w.color = red
				x = x.parent
			} else {
				if w.left.color == black {
					w.right.color = black
					w.color = red
					t.leftRotate(w)
					w = x.parent.left
				}

				w.color = x.parent.color
				x.parent.color = black
				w.left.color = black
				t.rightRotate(x.parent)
				x = t.root
			}
		}
	}

	x.color = black
}

func (t *Tree[T]) transplant(a, b *treeNode[T]) {
	if a.parent == t.nilNode {
		t.root = b
	} else if a == a.parent.left {
		a.parent.left = b
	} else {
		a.parent.right = b
	}

	b.parent = a.parent
}

func (t *Tree[T]) minimum(node *treeNode[T]) *treeNode[T] {
	for node.left != t.nilNode {
		node = node.left
	}

	return node
}

func (t *Tree[T]) maximum(node *treeNode[T]) *treeNode[T] {
	for node.right != t.nilNode {
		node = node.right
	}

	return node
}

func (t *Tree[T]) leftRotate(x *treeNode[T]) {
	y := x.right
	x.right = y.left

	if y.left != t.nilNode {
		y.left.parent = x
	}

	y.parent = x.parent

	if x.parent == t.nilNode {
		t.root = y
	} else if x == x.parent.left {
		x.parent.left = y
	} else {
		x.parent.right = y
	}

	y.left = x
	x.parent = y
}

func (t *Tree[T]) rightRotate(x *treeNode[T]) {
	y := x.left
	x.left = y.right

	if y.right != t.nilNode {
		y.right.parent = x
	}

	y.parent = x.parent

	if x.parent == t.nilNode {
		t.root = y
	} else if x == x.parent.right {
		x.parent.right = y
	} else {
		x.parent.left = y
	}

	y.right = x
	x.parent = y
}

func (t *Tree[T]) String() string {
	return t.toString(t.root, 0) + "\n"
}

func (t *Tree[T]) toString(node *treeNode[T], space int) string {
	if node == t.nilNode {
		return ""
	}
	space += tab
	result := ""

	result += t.toString(node.right, space)

	for i := tab; i < space; i++ {
		result += " "
	}

	color := "Red"

	if node.color == black {
		color = "Black"
	}

	result += fmt.Sprintf("%v (%s)\n", node.value, color)

	result += t.toString(node.left, space)

	return result
}
