package gtl

import (
	"reflect"
	"testing"
)

type testCase[T Ordered] struct {
	name string
	args []T
	want T
}

func TestMin(t *testing.T) {
	intCases := []testCase[int]{
		{
			name: "test1",
			args: []int{1, 2, 3, 4, 5},
			want: 1,
		}, {
			name: "test2",
			args: []int{5, 4, 3, 2, 1},
			want: 1,
		}, {
			name: "test3",
			args: []int{4, 8, 2, -30, 5, -50},
			want: -50,
		},
	}

	for _, tt := range intCases {
		t.Run(tt.name, func(t *testing.T) {
			if got := Min(tt.args...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}

	floatCases := []testCase[float64]{
		{
			name: "test1",
			args: []float64{3.2, 7.5, 4.6},
			want: 3.2,
		}, {
			name: "test2",
			args: []float64{-3.0, 0, 0.54, 42.3},
			want: -3.0,
		}, {
			name: "test3",
			args: []float64{4.4, 8.8, 2.2, -30.30, 5.5, -50.5},
			want: -50.5,
		},
	}

	for _, tt := range floatCases {
		t.Run(tt.name, func(t *testing.T) {
			if got := Min(tt.args...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}

	runeCases := []testCase[rune]{
		{
			name: "test1",
			args: []rune{'c', 'b', 'a'},
			want: 'a',
		}, {
			name: "test2",
			args: []rune{'f', 'o', 'o', 'b', 'a', 'r'},
			want: 'a',
		}, {
			name: "test3",
			args: []rune{'/', '.', 'a', '5', '+'},
			want: '+', // '+' char code 43
		},
	}

	for _, tt := range runeCases {
		t.Run(tt.name, func(t *testing.T) {
			if got := Min(tt.args...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}

	strCases := []testCase[string]{
		{
			name: "test1",
			args: []string{"foo", "bar", "baz"},
			want: "bar",
		}, {
			name: "test2",
			args: []string{"go", "python", "c#", "ada", "c++"},
			want: "ada",
		}, {
			name: "test3",
			args: []string{"aaaaabbbbbbcccc", "aaaaabbbbbbdddd", "aaaaabbbbbbccca"},
			want: "aaaaabbbbbbccca",
		},
	}

	for _, tt := range strCases {
		t.Run(tt.name, func(t *testing.T) {
			if got := Min(tt.args...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}
}
