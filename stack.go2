// Copyright 2020. The GTL Authors. All rights reserved.
// https://github.com/modern-dev/gtl
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

package gtl

// Stack is a container adapter that gives the programmer the functionality of a stack
// - specifically, a LIFO (last-in, first-out) data structure.
type Stack[T any] []T

// Size returns the number of elements in the underlying container.
// Complexity - constant e.g. O(1).
// Returns the number of elements in the container.
func (s *Stack[T]) Size() int {
	return len(*s)
}

// Empty checks if the underlying container has no elements.
// Complexity - constant e.g. O(1).
// Returns true if the underlying container is empty, false otherwise.
func (s *Stack[T]) Empty() bool {
	return s.Size() == 0
}

// Push pushes the given element value to the top of the Stack.
// Complexity - constant e.g. O(1).
func (s *Stack[T]) Push(item T) {
	*s = append(*s, item)
}

// Top returns reference to the top element in the Stack.
// This is the most recently pushed element. This element will be removed on a call to Pop.
// Complexity - constant e.g. O(1).
func (s *Stack[T]) Top() T {
	return (*s)[s.Size() - 1]
}

// Peek is an alias for Top.
// Complexity - constant e.g. O(1).
func (s *Stack[T]) Peek() T {
	return s.Top()
}

// Pop removes the top element from the Stack.
// Returns the object at the top of this Stack.
func (s *Stack[T]) Pop() T {
	res := s.Top()

	*s = (*s)[:s.Size() - 1]

	return res
}
